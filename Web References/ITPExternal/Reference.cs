//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace clsTabletCommon.ITPExternal {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wbsITP_ExternalSoap", Namespace="http://scms.silcar.com.au/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class wbsITP_External : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CookieLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsUserLoggedInOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubcontractorITPsForDownloadOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubcontractorITPsForDownloadWithTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPDownloadInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetITPStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFullQuestionnaireInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFullQuestionnaireExtraTypeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFullITPTypeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPBatteryFuseTypeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPValidHierarchyInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPBatteryCellInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFullDocumentSectionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPStaticTableVersionNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectQuestionnaireInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectQuestionnaireExtraInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectSection10InfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectRFUInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectBatteryAcceptTestInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPProjectDownloadDocumentsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetITPDocumentDownloadStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPQSEDownloadDocumentsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPInventoryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetITPFolderStructureInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsITPUploadableOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetITPUploadInfoNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetITPUploadInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestSPUploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback wbsGetWebMethodsOfWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback wbsGetWebMethodOutputOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wbsITP_External() {
            this.Url = "http://silcar-ws11.silcar.com.au:8003/wbsITP_External.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CookieLoginCompletedEventHandler CookieLoginCompleted;
        
        /// <remarks/>
        public event IsUserLoggedInCompletedEventHandler IsUserLoggedInCompleted;
        
        /// <remarks/>
        public event LogoutUserCompletedEventHandler LogoutUserCompleted;
        
        /// <remarks/>
        public event GetSubcontractorITPsForDownloadCompletedEventHandler GetSubcontractorITPsForDownloadCompleted;
        
        /// <remarks/>
        public event GetSubcontractorITPsForDownloadWithTypeCompletedEventHandler GetSubcontractorITPsForDownloadWithTypeCompleted;
        
        /// <remarks/>
        public event GetITPDownloadInfoCompletedEventHandler GetITPDownloadInfoCompleted;
        
        /// <remarks/>
        public event SetITPStatusCompletedEventHandler SetITPStatusCompleted;
        
        /// <remarks/>
        public event GetITPFullQuestionnaireInfoCompletedEventHandler GetITPFullQuestionnaireInfoCompleted;
        
        /// <remarks/>
        public event GetITPFullQuestionnaireExtraTypeInfoCompletedEventHandler GetITPFullQuestionnaireExtraTypeInfoCompleted;
        
        /// <remarks/>
        public event GetITPFullITPTypeInfoCompletedEventHandler GetITPFullITPTypeInfoCompleted;
        
        /// <remarks/>
        public event GetITPBatteryFuseTypeInfoCompletedEventHandler GetITPBatteryFuseTypeInfoCompleted;
        
        /// <remarks/>
        public event GetITPValidHierarchyInfoCompletedEventHandler GetITPValidHierarchyInfoCompleted;
        
        /// <remarks/>
        public event GetITPBatteryCellInfoCompletedEventHandler GetITPBatteryCellInfoCompleted;
        
        /// <remarks/>
        public event GetITPFullDocumentSectionInfoCompletedEventHandler GetITPFullDocumentSectionInfoCompleted;
        
        /// <remarks/>
        public event GetITPStaticTableVersionNumberCompletedEventHandler GetITPStaticTableVersionNumberCompleted;
        
        /// <remarks/>
        public event GetITPProjectQuestionnaireInfoCompletedEventHandler GetITPProjectQuestionnaireInfoCompleted;
        
        /// <remarks/>
        public event GetITPProjectQuestionnaireExtraInfoCompletedEventHandler GetITPProjectQuestionnaireExtraInfoCompleted;
        
        /// <remarks/>
        public event GetITPProjectSection10InfoCompletedEventHandler GetITPProjectSection10InfoCompleted;
        
        /// <remarks/>
        public event GetITPProjectRFUInfoCompletedEventHandler GetITPProjectRFUInfoCompleted;
        
        /// <remarks/>
        public event GetITPProjectBatteryAcceptTestInfoCompletedEventHandler GetITPProjectBatteryAcceptTestInfoCompleted;
        
        /// <remarks/>
        public event GetITPProjectDownloadDocumentsInfoCompletedEventHandler GetITPProjectDownloadDocumentsInfoCompleted;
        
        /// <remarks/>
        public event SetITPDocumentDownloadStatusCompletedEventHandler SetITPDocumentDownloadStatusCompleted;
        
        /// <remarks/>
        public event GetITPQSEDownloadDocumentsInfoCompletedEventHandler GetITPQSEDownloadDocumentsInfoCompleted;
        
        /// <remarks/>
        public event GetITPInventoryInfoCompletedEventHandler GetITPInventoryInfoCompleted;
        
        /// <remarks/>
        public event GetITPFolderStructureInfoCompletedEventHandler GetITPFolderStructureInfoCompleted;
        
        /// <remarks/>
        public event IsITPUploadableCompletedEventHandler IsITPUploadableCompleted;
        
        /// <remarks/>
        public event SetITPUploadInfoNewCompletedEventHandler SetITPUploadInfoNewCompleted;
        
        /// <remarks/>
        public event SetITPUploadInfoCompletedEventHandler SetITPUploadInfoCompleted;
        
        /// <remarks/>
        public event TestSPUploadCompletedEventHandler TestSPUploadCompleted;
        
        /// <remarks/>
        public event wbsGetWebMethodsOfWebServiceCompletedEventHandler wbsGetWebMethodsOfWebServiceCompleted;
        
        /// <remarks/>
        public event wbsGetWebMethodOutputCompletedEventHandler wbsGetWebMethodOutputCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/CookieLogin", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CookieLogin(string sUsername, string sPassword) {
            object[] results = this.Invoke("CookieLogin", new object[] {
                        sUsername,
                        sPassword});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CookieLoginAsync(string sUsername, string sPassword) {
            this.CookieLoginAsync(sUsername, sPassword, null);
        }
        
        /// <remarks/>
        public void CookieLoginAsync(string sUsername, string sPassword, object userState) {
            if ((this.CookieLoginOperationCompleted == null)) {
                this.CookieLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCookieLoginOperationCompleted);
            }
            this.InvokeAsync("CookieLogin", new object[] {
                        sUsername,
                        sPassword}, this.CookieLoginOperationCompleted, userState);
        }
        
        private void OnCookieLoginOperationCompleted(object arg) {
            if ((this.CookieLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CookieLoginCompleted(this, new CookieLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/IsUserLoggedIn", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] IsUserLoggedIn(string sSessionId, string sUsername) {
            object[] results = this.Invoke("IsUserLoggedIn", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void IsUserLoggedInAsync(string sSessionId, string sUsername) {
            this.IsUserLoggedInAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void IsUserLoggedInAsync(string sSessionId, string sUsername, object userState) {
            if ((this.IsUserLoggedInOperationCompleted == null)) {
                this.IsUserLoggedInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsUserLoggedInOperationCompleted);
            }
            this.InvokeAsync("IsUserLoggedIn", new object[] {
                        sSessionId,
                        sUsername}, this.IsUserLoggedInOperationCompleted, userState);
        }
        
        private void OnIsUserLoggedInOperationCompleted(object arg) {
            if ((this.IsUserLoggedInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsUserLoggedInCompleted(this, new IsUserLoggedInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/LogoutUser", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] LogoutUser(string sSessionId, string sUsername) {
            object[] results = this.Invoke("LogoutUser", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void LogoutUserAsync(string sSessionId, string sUsername) {
            this.LogoutUserAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void LogoutUserAsync(string sSessionId, string sUsername, object userState) {
            if ((this.LogoutUserOperationCompleted == null)) {
                this.LogoutUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutUserOperationCompleted);
            }
            this.InvokeAsync("LogoutUser", new object[] {
                        sSessionId,
                        sUsername}, this.LogoutUserOperationCompleted, userState);
        }
        
        private void OnLogoutUserOperationCompleted(object arg) {
            if ((this.LogoutUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutUserCompleted(this, new LogoutUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetSubcontractorITPsForDownload", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetSubcontractorITPsForDownload(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetSubcontractorITPsForDownload", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubcontractorITPsForDownloadAsync(string sSessionId, string sUsername) {
            this.GetSubcontractorITPsForDownloadAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetSubcontractorITPsForDownloadAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetSubcontractorITPsForDownloadOperationCompleted == null)) {
                this.GetSubcontractorITPsForDownloadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubcontractorITPsForDownloadOperationCompleted);
            }
            this.InvokeAsync("GetSubcontractorITPsForDownload", new object[] {
                        sSessionId,
                        sUsername}, this.GetSubcontractorITPsForDownloadOperationCompleted, userState);
        }
        
        private void OnGetSubcontractorITPsForDownloadOperationCompleted(object arg) {
            if ((this.GetSubcontractorITPsForDownloadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubcontractorITPsForDownloadCompleted(this, new GetSubcontractorITPsForDownloadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetSubcontractorITPsForDownloadWithType", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetSubcontractorITPsForDownloadWithType(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetSubcontractorITPsForDownloadWithType", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSubcontractorITPsForDownloadWithTypeAsync(string sSessionId, string sUsername) {
            this.GetSubcontractorITPsForDownloadWithTypeAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetSubcontractorITPsForDownloadWithTypeAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetSubcontractorITPsForDownloadWithTypeOperationCompleted == null)) {
                this.GetSubcontractorITPsForDownloadWithTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubcontractorITPsForDownloadWithTypeOperationCompleted);
            }
            this.InvokeAsync("GetSubcontractorITPsForDownloadWithType", new object[] {
                        sSessionId,
                        sUsername}, this.GetSubcontractorITPsForDownloadWithTypeOperationCompleted, userState);
        }
        
        private void OnGetSubcontractorITPsForDownloadWithTypeOperationCompleted(object arg) {
            if ((this.GetSubcontractorITPsForDownloadWithTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubcontractorITPsForDownloadWithTypeCompleted(this, new GetSubcontractorITPsForDownloadWithTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPDownloadInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPDownloadInfo(string sSessionId, string sUsername, string sID) {
            object[] results = this.Invoke("GetITPDownloadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sID});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPDownloadInfoAsync(string sSessionId, string sUsername, string sID) {
            this.GetITPDownloadInfoAsync(sSessionId, sUsername, sID, null);
        }
        
        /// <remarks/>
        public void GetITPDownloadInfoAsync(string sSessionId, string sUsername, string sID, object userState) {
            if ((this.GetITPDownloadInfoOperationCompleted == null)) {
                this.GetITPDownloadInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPDownloadInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPDownloadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sID}, this.GetITPDownloadInfoOperationCompleted, userState);
        }
        
        private void OnGetITPDownloadInfoOperationCompleted(object arg) {
            if ((this.GetITPDownloadInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPDownloadInfoCompleted(this, new GetITPDownloadInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/SetITPStatus", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] SetITPStatus(string sSessionId, string sUsername, string sID, int iStatus) {
            object[] results = this.Invoke("SetITPStatus", new object[] {
                        sSessionId,
                        sUsername,
                        sID,
                        iStatus});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void SetITPStatusAsync(string sSessionId, string sUsername, string sID, int iStatus) {
            this.SetITPStatusAsync(sSessionId, sUsername, sID, iStatus, null);
        }
        
        /// <remarks/>
        public void SetITPStatusAsync(string sSessionId, string sUsername, string sID, int iStatus, object userState) {
            if ((this.SetITPStatusOperationCompleted == null)) {
                this.SetITPStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetITPStatusOperationCompleted);
            }
            this.InvokeAsync("SetITPStatus", new object[] {
                        sSessionId,
                        sUsername,
                        sID,
                        iStatus}, this.SetITPStatusOperationCompleted, userState);
        }
        
        private void OnSetITPStatusOperationCompleted(object arg) {
            if ((this.SetITPStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetITPStatusCompleted(this, new SetITPStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFullQuestionnaireInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPFullQuestionnaireInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFullQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPFullQuestionnaireInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFullQuestionnaireInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPFullQuestionnaireInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFullQuestionnaireInfoOperationCompleted == null)) {
                this.GetITPFullQuestionnaireInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFullQuestionnaireInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPFullQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFullQuestionnaireInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFullQuestionnaireInfoOperationCompleted(object arg) {
            if ((this.GetITPFullQuestionnaireInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFullQuestionnaireInfoCompleted(this, new GetITPFullQuestionnaireInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFullQuestionnaireExtraTypeInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPFullQuestionnaireExtraTypeInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFullQuestionnaireExtraTypeInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPFullQuestionnaireExtraTypeInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFullQuestionnaireExtraTypeInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPFullQuestionnaireExtraTypeInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFullQuestionnaireExtraTypeInfoOperationCompleted == null)) {
                this.GetITPFullQuestionnaireExtraTypeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFullQuestionnaireExtraTypeInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPFullQuestionnaireExtraTypeInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFullQuestionnaireExtraTypeInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFullQuestionnaireExtraTypeInfoOperationCompleted(object arg) {
            if ((this.GetITPFullQuestionnaireExtraTypeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFullQuestionnaireExtraTypeInfoCompleted(this, new GetITPFullQuestionnaireExtraTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFullITPTypeInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPFullITPTypeInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFullITPTypeInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPFullITPTypeInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFullITPTypeInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPFullITPTypeInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFullITPTypeInfoOperationCompleted == null)) {
                this.GetITPFullITPTypeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFullITPTypeInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPFullITPTypeInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFullITPTypeInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFullITPTypeInfoOperationCompleted(object arg) {
            if ((this.GetITPFullITPTypeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFullITPTypeInfoCompleted(this, new GetITPFullITPTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPBatteryFuseTypeInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPBatteryFuseTypeInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPBatteryFuseTypeInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPBatteryFuseTypeInfoAsync(string sSessionId, string sUsername) {
            this.GetITPBatteryFuseTypeInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPBatteryFuseTypeInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPBatteryFuseTypeInfoOperationCompleted == null)) {
                this.GetITPBatteryFuseTypeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPBatteryFuseTypeInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPBatteryFuseTypeInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPBatteryFuseTypeInfoOperationCompleted, userState);
        }
        
        private void OnGetITPBatteryFuseTypeInfoOperationCompleted(object arg) {
            if ((this.GetITPBatteryFuseTypeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPBatteryFuseTypeInfoCompleted(this, new GetITPBatteryFuseTypeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPValidHierarchyInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPValidHierarchyInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPValidHierarchyInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPValidHierarchyInfoAsync(string sSessionId, string sUsername) {
            this.GetITPValidHierarchyInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPValidHierarchyInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPValidHierarchyInfoOperationCompleted == null)) {
                this.GetITPValidHierarchyInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPValidHierarchyInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPValidHierarchyInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPValidHierarchyInfoOperationCompleted, userState);
        }
        
        private void OnGetITPValidHierarchyInfoOperationCompleted(object arg) {
            if ((this.GetITPValidHierarchyInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPValidHierarchyInfoCompleted(this, new GetITPValidHierarchyInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPBatteryCellInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPBatteryCellInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPBatteryCellInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPBatteryCellInfoAsync(string sSessionId, string sUsername) {
            this.GetITPBatteryCellInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPBatteryCellInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPBatteryCellInfoOperationCompleted == null)) {
                this.GetITPBatteryCellInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPBatteryCellInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPBatteryCellInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPBatteryCellInfoOperationCompleted, userState);
        }
        
        private void OnGetITPBatteryCellInfoOperationCompleted(object arg) {
            if ((this.GetITPBatteryCellInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPBatteryCellInfoCompleted(this, new GetITPBatteryCellInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFullDocumentSectionInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPFullDocumentSectionInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFullDocumentSectionInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPFullDocumentSectionInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFullDocumentSectionInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPFullDocumentSectionInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFullDocumentSectionInfoOperationCompleted == null)) {
                this.GetITPFullDocumentSectionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFullDocumentSectionInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPFullDocumentSectionInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFullDocumentSectionInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFullDocumentSectionInfoOperationCompleted(object arg) {
            if ((this.GetITPFullDocumentSectionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFullDocumentSectionInfoCompleted(this, new GetITPFullDocumentSectionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPStaticTableVersionNumber", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPStaticTableVersionNumber(string sSessionId, string sUsername, string sTableName) {
            object[] results = this.Invoke("GetITPStaticTableVersionNumber", new object[] {
                        sSessionId,
                        sUsername,
                        sTableName});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPStaticTableVersionNumberAsync(string sSessionId, string sUsername, string sTableName) {
            this.GetITPStaticTableVersionNumberAsync(sSessionId, sUsername, sTableName, null);
        }
        
        /// <remarks/>
        public void GetITPStaticTableVersionNumberAsync(string sSessionId, string sUsername, string sTableName, object userState) {
            if ((this.GetITPStaticTableVersionNumberOperationCompleted == null)) {
                this.GetITPStaticTableVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPStaticTableVersionNumberOperationCompleted);
            }
            this.InvokeAsync("GetITPStaticTableVersionNumber", new object[] {
                        sSessionId,
                        sUsername,
                        sTableName}, this.GetITPStaticTableVersionNumberOperationCompleted, userState);
        }
        
        private void OnGetITPStaticTableVersionNumberOperationCompleted(object arg) {
            if ((this.GetITPStaticTableVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPStaticTableVersionNumberCompleted(this, new GetITPStaticTableVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectQuestionnaireInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPProjectQuestionnaireInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPProjectQuestionnaireInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectQuestionnaireInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        /// <remarks/>
        public void GetITPProjectQuestionnaireInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectQuestionnaireInfoOperationCompleted == null)) {
                this.GetITPProjectQuestionnaireInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectQuestionnaireInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPProjectQuestionnaireInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectQuestionnaireInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectQuestionnaireInfoOperationCompleted(object arg) {
            if ((this.GetITPProjectQuestionnaireInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectQuestionnaireInfoCompleted(this, new GetITPProjectQuestionnaireInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectQuestionnaireExtraInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPProjectQuestionnaireExtraInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectQuestionnaireExtraInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPProjectQuestionnaireExtraInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectQuestionnaireExtraInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        /// <remarks/>
        public void GetITPProjectQuestionnaireExtraInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectQuestionnaireExtraInfoOperationCompleted == null)) {
                this.GetITPProjectQuestionnaireExtraInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectQuestionnaireExtraInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPProjectQuestionnaireExtraInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectQuestionnaireExtraInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectQuestionnaireExtraInfoOperationCompleted(object arg) {
            if ((this.GetITPProjectQuestionnaireExtraInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectQuestionnaireExtraInfoCompleted(this, new GetITPProjectQuestionnaireExtraInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectSection10Info", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPProjectSection10Info(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectSection10Info", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPProjectSection10InfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectSection10InfoAsync(sSessionId, sUsername, sId, null);
        }
        
        /// <remarks/>
        public void GetITPProjectSection10InfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectSection10InfoOperationCompleted == null)) {
                this.GetITPProjectSection10InfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectSection10InfoOperationCompleted);
            }
            this.InvokeAsync("GetITPProjectSection10Info", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectSection10InfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectSection10InfoOperationCompleted(object arg) {
            if ((this.GetITPProjectSection10InfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectSection10InfoCompleted(this, new GetITPProjectSection10InfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectRFUInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPProjectRFUInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectRFUInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPProjectRFUInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectRFUInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        /// <remarks/>
        public void GetITPProjectRFUInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectRFUInfoOperationCompleted == null)) {
                this.GetITPProjectRFUInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectRFUInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPProjectRFUInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectRFUInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectRFUInfoOperationCompleted(object arg) {
            if ((this.GetITPProjectRFUInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectRFUInfoCompleted(this, new GetITPProjectRFUInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectBatteryAcceptTestInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPProjectBatteryAcceptTestInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectBatteryAcceptTestInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPProjectBatteryAcceptTestInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectBatteryAcceptTestInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        /// <remarks/>
        public void GetITPProjectBatteryAcceptTestInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectBatteryAcceptTestInfoOperationCompleted == null)) {
                this.GetITPProjectBatteryAcceptTestInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectBatteryAcceptTestInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPProjectBatteryAcceptTestInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectBatteryAcceptTestInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectBatteryAcceptTestInfoOperationCompleted(object arg) {
            if ((this.GetITPProjectBatteryAcceptTestInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectBatteryAcceptTestInfoCompleted(this, new GetITPProjectBatteryAcceptTestInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPProjectDownloadDocumentsInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPProjectDownloadDocumentsInfo(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("GetITPProjectDownloadDocumentsInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPProjectDownloadDocumentsInfoAsync(string sSessionId, string sUsername, string sId) {
            this.GetITPProjectDownloadDocumentsInfoAsync(sSessionId, sUsername, sId, null);
        }
        
        /// <remarks/>
        public void GetITPProjectDownloadDocumentsInfoAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.GetITPProjectDownloadDocumentsInfoOperationCompleted == null)) {
                this.GetITPProjectDownloadDocumentsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPProjectDownloadDocumentsInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPProjectDownloadDocumentsInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.GetITPProjectDownloadDocumentsInfoOperationCompleted, userState);
        }
        
        private void OnGetITPProjectDownloadDocumentsInfoOperationCompleted(object arg) {
            if ((this.GetITPProjectDownloadDocumentsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPProjectDownloadDocumentsInfoCompleted(this, new GetITPProjectDownloadDocumentsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/SetITPDocumentDownloadStatus", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] SetITPDocumentDownloadStatus(string sSessionId, string sUsername, string sID, string sDocURL, int iStatus) {
            object[] results = this.Invoke("SetITPDocumentDownloadStatus", new object[] {
                        sSessionId,
                        sUsername,
                        sID,
                        sDocURL,
                        iStatus});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void SetITPDocumentDownloadStatusAsync(string sSessionId, string sUsername, string sID, string sDocURL, int iStatus) {
            this.SetITPDocumentDownloadStatusAsync(sSessionId, sUsername, sID, sDocURL, iStatus, null);
        }
        
        /// <remarks/>
        public void SetITPDocumentDownloadStatusAsync(string sSessionId, string sUsername, string sID, string sDocURL, int iStatus, object userState) {
            if ((this.SetITPDocumentDownloadStatusOperationCompleted == null)) {
                this.SetITPDocumentDownloadStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetITPDocumentDownloadStatusOperationCompleted);
            }
            this.InvokeAsync("SetITPDocumentDownloadStatus", new object[] {
                        sSessionId,
                        sUsername,
                        sID,
                        sDocURL,
                        iStatus}, this.SetITPDocumentDownloadStatusOperationCompleted, userState);
        }
        
        private void OnSetITPDocumentDownloadStatusOperationCompleted(object arg) {
            if ((this.SetITPDocumentDownloadStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetITPDocumentDownloadStatusCompleted(this, new SetITPDocumentDownloadStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPQSEDownloadDocumentsInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPQSEDownloadDocumentsInfo(string sSessionId, string sUsername, string sDocumentType) {
            object[] results = this.Invoke("GetITPQSEDownloadDocumentsInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sDocumentType});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPQSEDownloadDocumentsInfoAsync(string sSessionId, string sUsername, string sDocumentType) {
            this.GetITPQSEDownloadDocumentsInfoAsync(sSessionId, sUsername, sDocumentType, null);
        }
        
        /// <remarks/>
        public void GetITPQSEDownloadDocumentsInfoAsync(string sSessionId, string sUsername, string sDocumentType, object userState) {
            if ((this.GetITPQSEDownloadDocumentsInfoOperationCompleted == null)) {
                this.GetITPQSEDownloadDocumentsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPQSEDownloadDocumentsInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPQSEDownloadDocumentsInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sDocumentType}, this.GetITPQSEDownloadDocumentsInfoOperationCompleted, userState);
        }
        
        private void OnGetITPQSEDownloadDocumentsInfoOperationCompleted(object arg) {
            if ((this.GetITPQSEDownloadDocumentsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPQSEDownloadDocumentsInfoCompleted(this, new GetITPQSEDownloadDocumentsInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPInventoryInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPInventoryInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPInventoryInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPInventoryInfoAsync(string sSessionId, string sUsername) {
            this.GetITPInventoryInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPInventoryInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPInventoryInfoOperationCompleted == null)) {
                this.GetITPInventoryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPInventoryInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPInventoryInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPInventoryInfoOperationCompleted, userState);
        }
        
        private void OnGetITPInventoryInfoOperationCompleted(object arg) {
            if ((this.GetITPInventoryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPInventoryInfoCompleted(this, new GetITPInventoryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/GetITPFolderStructureInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetITPFolderStructureInfo(string sSessionId, string sUsername) {
            object[] results = this.Invoke("GetITPFolderStructureInfo", new object[] {
                        sSessionId,
                        sUsername});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetITPFolderStructureInfoAsync(string sSessionId, string sUsername) {
            this.GetITPFolderStructureInfoAsync(sSessionId, sUsername, null);
        }
        
        /// <remarks/>
        public void GetITPFolderStructureInfoAsync(string sSessionId, string sUsername, object userState) {
            if ((this.GetITPFolderStructureInfoOperationCompleted == null)) {
                this.GetITPFolderStructureInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetITPFolderStructureInfoOperationCompleted);
            }
            this.InvokeAsync("GetITPFolderStructureInfo", new object[] {
                        sSessionId,
                        sUsername}, this.GetITPFolderStructureInfoOperationCompleted, userState);
        }
        
        private void OnGetITPFolderStructureInfoOperationCompleted(object arg) {
            if ((this.GetITPFolderStructureInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetITPFolderStructureInfoCompleted(this, new GetITPFolderStructureInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/IsITPUploadable", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] IsITPUploadable(string sSessionId, string sUsername, string sId) {
            object[] results = this.Invoke("IsITPUploadable", new object[] {
                        sSessionId,
                        sUsername,
                        sId});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void IsITPUploadableAsync(string sSessionId, string sUsername, string sId) {
            this.IsITPUploadableAsync(sSessionId, sUsername, sId, null);
        }
        
        /// <remarks/>
        public void IsITPUploadableAsync(string sSessionId, string sUsername, string sId, object userState) {
            if ((this.IsITPUploadableOperationCompleted == null)) {
                this.IsITPUploadableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsITPUploadableOperationCompleted);
            }
            this.InvokeAsync("IsITPUploadable", new object[] {
                        sSessionId,
                        sUsername,
                        sId}, this.IsITPUploadableOperationCompleted, userState);
        }
        
        private void OnIsITPUploadableOperationCompleted(object arg) {
            if ((this.IsITPUploadableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsITPUploadableCompleted(this, new IsITPUploadableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/SetITPUploadInfoNew", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] SetITPUploadInfoNew(string sSessionId, string sUsername, string sSendString) {
            object[] results = this.Invoke("SetITPUploadInfoNew", new object[] {
                        sSessionId,
                        sUsername,
                        sSendString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void SetITPUploadInfoNewAsync(string sSessionId, string sUsername, string sSendString) {
            this.SetITPUploadInfoNewAsync(sSessionId, sUsername, sSendString, null);
        }
        
        /// <remarks/>
        public void SetITPUploadInfoNewAsync(string sSessionId, string sUsername, string sSendString, object userState) {
            if ((this.SetITPUploadInfoNewOperationCompleted == null)) {
                this.SetITPUploadInfoNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetITPUploadInfoNewOperationCompleted);
            }
            this.InvokeAsync("SetITPUploadInfoNew", new object[] {
                        sSessionId,
                        sUsername,
                        sSendString}, this.SetITPUploadInfoNewOperationCompleted, userState);
        }
        
        private void OnSetITPUploadInfoNewOperationCompleted(object arg) {
            if ((this.SetITPUploadInfoNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetITPUploadInfoNewCompleted(this, new SetITPUploadInfoNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/SetITPUploadInfo", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] SetITPUploadInfo(string sSessionId, string sUsername, string sSendString) {
            object[] results = this.Invoke("SetITPUploadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sSendString});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void SetITPUploadInfoAsync(string sSessionId, string sUsername, string sSendString) {
            this.SetITPUploadInfoAsync(sSessionId, sUsername, sSendString, null);
        }
        
        /// <remarks/>
        public void SetITPUploadInfoAsync(string sSessionId, string sUsername, string sSendString, object userState) {
            if ((this.SetITPUploadInfoOperationCompleted == null)) {
                this.SetITPUploadInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetITPUploadInfoOperationCompleted);
            }
            this.InvokeAsync("SetITPUploadInfo", new object[] {
                        sSessionId,
                        sUsername,
                        sSendString}, this.SetITPUploadInfoOperationCompleted, userState);
        }
        
        private void OnSetITPUploadInfoOperationCompleted(object arg) {
            if ((this.SetITPUploadInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetITPUploadInfoCompleted(this, new SetITPUploadInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/TestSPUpload", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TestSPUpload(string[] sTest) {
            object[] results = this.Invoke("TestSPUpload", new object[] {
                        sTest});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TestSPUploadAsync(string[] sTest) {
            this.TestSPUploadAsync(sTest, null);
        }
        
        /// <remarks/>
        public void TestSPUploadAsync(string[] sTest, object userState) {
            if ((this.TestSPUploadOperationCompleted == null)) {
                this.TestSPUploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestSPUploadOperationCompleted);
            }
            this.InvokeAsync("TestSPUpload", new object[] {
                        sTest}, this.TestSPUploadOperationCompleted, userState);
        }
        
        private void OnTestSPUploadOperationCompleted(object arg) {
            if ((this.TestSPUploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestSPUploadCompleted(this, new TestSPUploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/wbsGetWebMethodsOfWebService", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] wbsGetWebMethodsOfWebService(string sSessionId, string sUser, string sWBSURL) {
            object[] results = this.Invoke("wbsGetWebMethodsOfWebService", new object[] {
                        sSessionId,
                        sUser,
                        sWBSURL});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void wbsGetWebMethodsOfWebServiceAsync(string sSessionId, string sUser, string sWBSURL) {
            this.wbsGetWebMethodsOfWebServiceAsync(sSessionId, sUser, sWBSURL, null);
        }
        
        /// <remarks/>
        public void wbsGetWebMethodsOfWebServiceAsync(string sSessionId, string sUser, string sWBSURL, object userState) {
            if ((this.wbsGetWebMethodsOfWebServiceOperationCompleted == null)) {
                this.wbsGetWebMethodsOfWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwbsGetWebMethodsOfWebServiceOperationCompleted);
            }
            this.InvokeAsync("wbsGetWebMethodsOfWebService", new object[] {
                        sSessionId,
                        sUser,
                        sWBSURL}, this.wbsGetWebMethodsOfWebServiceOperationCompleted, userState);
        }
        
        private void OnwbsGetWebMethodsOfWebServiceOperationCompleted(object arg) {
            if ((this.wbsGetWebMethodsOfWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wbsGetWebMethodsOfWebServiceCompleted(this, new wbsGetWebMethodsOfWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://scms.silcar.com.au/wbsGetWebMethodOutput", RequestNamespace="http://scms.silcar.com.au/", ResponseNamespace="http://scms.silcar.com.au/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object wbsGetWebMethodOutput(string sWBSURL, string sMethodName, object args) {
            object[] results = this.Invoke("wbsGetWebMethodOutput", new object[] {
                        sWBSURL,
                        sMethodName,
                        args});
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void wbsGetWebMethodOutputAsync(string sWBSURL, string sMethodName, object args) {
            this.wbsGetWebMethodOutputAsync(sWBSURL, sMethodName, args, null);
        }
        
        /// <remarks/>
        public void wbsGetWebMethodOutputAsync(string sWBSURL, string sMethodName, object args, object userState) {
            if ((this.wbsGetWebMethodOutputOperationCompleted == null)) {
                this.wbsGetWebMethodOutputOperationCompleted = new System.Threading.SendOrPostCallback(this.OnwbsGetWebMethodOutputOperationCompleted);
            }
            this.InvokeAsync("wbsGetWebMethodOutput", new object[] {
                        sWBSURL,
                        sMethodName,
                        args}, this.wbsGetWebMethodOutputOperationCompleted, userState);
        }
        
        private void OnwbsGetWebMethodOutputOperationCompleted(object arg) {
            if ((this.wbsGetWebMethodOutputCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.wbsGetWebMethodOutputCompleted(this, new wbsGetWebMethodOutputCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CookieLoginCompletedEventHandler(object sender, CookieLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CookieLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CookieLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsUserLoggedInCompletedEventHandler(object sender, IsUserLoggedInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsUserLoggedInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsUserLoggedInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LogoutUserCompletedEventHandler(object sender, LogoutUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoutUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoutUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSubcontractorITPsForDownloadCompletedEventHandler(object sender, GetSubcontractorITPsForDownloadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubcontractorITPsForDownloadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubcontractorITPsForDownloadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetSubcontractorITPsForDownloadWithTypeCompletedEventHandler(object sender, GetSubcontractorITPsForDownloadWithTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubcontractorITPsForDownloadWithTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubcontractorITPsForDownloadWithTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPDownloadInfoCompletedEventHandler(object sender, GetITPDownloadInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPDownloadInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPDownloadInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetITPStatusCompletedEventHandler(object sender, SetITPStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetITPStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetITPStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPFullQuestionnaireInfoCompletedEventHandler(object sender, GetITPFullQuestionnaireInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPFullQuestionnaireInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFullQuestionnaireInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPFullQuestionnaireExtraTypeInfoCompletedEventHandler(object sender, GetITPFullQuestionnaireExtraTypeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPFullQuestionnaireExtraTypeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFullQuestionnaireExtraTypeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPFullITPTypeInfoCompletedEventHandler(object sender, GetITPFullITPTypeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPFullITPTypeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFullITPTypeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPBatteryFuseTypeInfoCompletedEventHandler(object sender, GetITPBatteryFuseTypeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPBatteryFuseTypeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPBatteryFuseTypeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPValidHierarchyInfoCompletedEventHandler(object sender, GetITPValidHierarchyInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPValidHierarchyInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPValidHierarchyInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPBatteryCellInfoCompletedEventHandler(object sender, GetITPBatteryCellInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPBatteryCellInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPBatteryCellInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPFullDocumentSectionInfoCompletedEventHandler(object sender, GetITPFullDocumentSectionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPFullDocumentSectionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFullDocumentSectionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPStaticTableVersionNumberCompletedEventHandler(object sender, GetITPStaticTableVersionNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPStaticTableVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPStaticTableVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPProjectQuestionnaireInfoCompletedEventHandler(object sender, GetITPProjectQuestionnaireInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPProjectQuestionnaireInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectQuestionnaireInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPProjectQuestionnaireExtraInfoCompletedEventHandler(object sender, GetITPProjectQuestionnaireExtraInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPProjectQuestionnaireExtraInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectQuestionnaireExtraInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPProjectSection10InfoCompletedEventHandler(object sender, GetITPProjectSection10InfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPProjectSection10InfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectSection10InfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPProjectRFUInfoCompletedEventHandler(object sender, GetITPProjectRFUInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPProjectRFUInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectRFUInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPProjectBatteryAcceptTestInfoCompletedEventHandler(object sender, GetITPProjectBatteryAcceptTestInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPProjectBatteryAcceptTestInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectBatteryAcceptTestInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPProjectDownloadDocumentsInfoCompletedEventHandler(object sender, GetITPProjectDownloadDocumentsInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPProjectDownloadDocumentsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPProjectDownloadDocumentsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetITPDocumentDownloadStatusCompletedEventHandler(object sender, SetITPDocumentDownloadStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetITPDocumentDownloadStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetITPDocumentDownloadStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPQSEDownloadDocumentsInfoCompletedEventHandler(object sender, GetITPQSEDownloadDocumentsInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPQSEDownloadDocumentsInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPQSEDownloadDocumentsInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPInventoryInfoCompletedEventHandler(object sender, GetITPInventoryInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPInventoryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPInventoryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetITPFolderStructureInfoCompletedEventHandler(object sender, GetITPFolderStructureInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetITPFolderStructureInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetITPFolderStructureInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void IsITPUploadableCompletedEventHandler(object sender, IsITPUploadableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsITPUploadableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsITPUploadableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetITPUploadInfoNewCompletedEventHandler(object sender, SetITPUploadInfoNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetITPUploadInfoNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetITPUploadInfoNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SetITPUploadInfoCompletedEventHandler(object sender, SetITPUploadInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetITPUploadInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetITPUploadInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TestSPUploadCompletedEventHandler(object sender, TestSPUploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestSPUploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestSPUploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void wbsGetWebMethodsOfWebServiceCompletedEventHandler(object sender, wbsGetWebMethodsOfWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wbsGetWebMethodsOfWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wbsGetWebMethodsOfWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void wbsGetWebMethodOutputCompletedEventHandler(object sender, wbsGetWebMethodOutputCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class wbsGetWebMethodOutputCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal wbsGetWebMethodOutputCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591